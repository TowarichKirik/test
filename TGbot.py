import telebot
from telebot import types
import sqlite3
import os
import threading
from dotenv import load_dotenv

load_dotenv()
bot = telebot.TeleBot(os.getenv('BOT_TOKEN'))

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
db_lock = threading.Lock()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with db_lock:
        conn = sqlite3.connect("database.db", timeout=10, check_same_thread=False)
        try:
            cursor = conn.cursor()

            # –í–∫–ª—é—á–∞–µ–º WAL-—Ä–µ–∂–∏–º –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü
            conn.execute("PRAGMA journal_mode=WAL")

            cursor.execute("""CREATE TABLE IF NOT EXISTS users(
                login TEXT,
                password TEXT,
                Account REAL
            )""")

            cursor.execute("""CREATE TABLE IF NOT EXISTS credit(
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                userLogin TEXT,
                Amount REAL,
                PPY REAL,
                AdInfo TEXT
            )""")

            conn.commit()
        finally:
            conn.close()

# –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init_db()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
def checkLogin(login):
    with db_lock:
        conn = sqlite3.connect("database.db", check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE login=?", (login,))
        result = cursor.fetchone() is not None
        conn.close()
        return result


def checkPasswordCorrectness(login, password):
    try:
        with db_lock:
            conn = sqlite3.connect("database.db", check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute('SELECT password FROM users WHERE login=?', (login,))
            user_password = cursor.fetchone()
            conn.close()

            if user_password and password == user_password[0]:
                return True
            return False
    except Exception as e:
        print("Error in checkPasswordCorrectness:", e)
        return False


def checkPasswordStrength(password):
    if len(password) < 8:
        return "–í–∞—à –ø–∞—Ä–æ–ª—å –º–µ–Ω—å—à–µ 8 —Å–∏–º–≤–æ–ª–æ–≤!"
    if not any(char.isdigit() for char in password):
        return "–í–∞—à –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1 —Ü–∏—Ñ—Ä—ã"
    return None


def execute_query(query, params=(), commit=False):
    with db_lock:
        conn = sqlite3.connect("database.db", check_same_thread=False)
        cursor = conn.cursor()
        try:
            cursor.execute(query, params)
            if commit:
                conn.commit()
            if query.strip().upper().startswith("SELECT"):
                return cursor.fetchall()
        finally:
            conn.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = {}
temp_data = {}
logged_in = {}


def reset_user_data(chat_id):
    if chat_id in user_states:
        del user_states[chat_id]
    if chat_id in temp_data:
        del temp_data[chat_id]


def show_main_menu(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("üí∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏", callback_data='send_money')
    btn2 = types.InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data='logout')
    btn3 = types.InlineKeyboardButton("üë• –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='users_list')
    markup.add(btn1, btn2, btn3)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


def show_start_menu(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("üîê –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register')
    btn2 = types.InlineKeyboardButton("üìù –í–æ–π—Ç–∏", callback_data='login')
    markup.add(btn2, btn1)
    bot.send_message(
        chat_id,
        'üè¶ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ <b>Fake Bank</b>!\n\n'
        'üìù –î–ª—è <b>–í—Ö–æ–¥–∞</b> –≤ —Å–∏—Å—Ç–µ–º—É –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–õ–æ–≥–∏–Ω</b> –∏ <b>–ü–∞—Ä–æ–ª—å</b>\n\n'
        'üîê –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç—É –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ <b>Fake Bank</b>, <b>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å</b>!',
        parse_mode='html',
        reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id
    reset_user_data(chat_id)
    if chat_id in logged_in:
        del logged_in[chat_id]
    show_start_menu(chat_id)


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    chat_id = call.message.chat.id
    if call.data == 'register':
        bot.send_message(chat_id, "üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
        user_states[chat_id] = 'REGISTER_LOGIN'

    elif call.data == 'login':
        bot.send_message(chat_id, "üìù –í—Ö–æ–¥\n\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
        user_states[chat_id] = 'LOGIN_LOGIN'

    elif call.data == 'send_money':
        if chat_id not in logged_in or not logged_in[chat_id]:
            bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            show_start_menu(chat_id)
        else:
            bot.send_message(chat_id, "üí∏ –ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥\n\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
            user_states[chat_id] = 'SEND_MONEY_RECEIVER'

    elif call.data == 'logout':
        bot.send_message(chat_id, "üö™ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? (–¥–∞/–Ω–µ—Ç)")
        user_states[chat_id] = 'LOGOUT_CONFIRM'

    elif call.data == 'users_list':

        users = execute_query("SELECT * FROM users")
        if not users:
            bot.send_message(chat_id, '–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
            return
        response = 'üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:'
        bot.send_message(chat_id, response)
        list_of_users = ''
        for user in users:
            list_of_users += f"–õ–æ–≥–∏–Ω: <code>{user[0]}</code> –ü–∞—Ä–æ–ª—å: <code>{user[1]}</code> –ë–∞–ª–∞–Ω—Å: <code>{user[2]}</code>\n"
        bot.send_message(chat_id, list_of_users, parse_mode='html')
        user_states[chat_id] = 'LIST_SEND'


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    text = message.text
    state = user_states.get(chat_id, None)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ª–æ–≥–∏–Ω
    if state == 'REGISTER_LOGIN':
        if checkLogin(text):
            bot.send_message(chat_id, f"‚ùå –õ–æ–≥–∏–Ω '{text}' —É–∂–µ –∑–∞–Ω—è—Ç!\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω:")
            return

        temp_data[chat_id] = {'login': text}
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        user_states[chat_id] = 'REGISTER_PASSWORD'

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ø–∞—Ä–æ–ª—å
    elif state == 'REGISTER_PASSWORD':
        error = checkPasswordStrength(text)
        if error:
            bot.send_message(chat_id, f"‚ùå {error}\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ–≤—Ç–æ—Ä–Ω–æ:")
            return

        login = temp_data[chat_id]['login']
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        execute_query(
            "INSERT INTO users (login, password, Account) VALUES (?, ?, 1000)",
            (login, text),
            commit=True
        )
        logged_in[chat_id] = login
        bot.send_message(chat_id, "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        reset_user_data(chat_id)
        show_main_menu(chat_id)

    # –í—Ö–æ–¥: –ª–æ–≥–∏–Ω
    elif state == 'LOGIN_LOGIN':
        if not checkLogin(text):
            bot.send_message(chat_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω —Å–Ω–æ–≤–∞:")
            return

        temp_data[chat_id] = {'login': text}
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        user_states[chat_id] = 'LOGIN_PASSWORD'

    # –í—Ö–æ–¥: –ø–∞—Ä–æ–ª—å
    elif state == 'LOGIN_PASSWORD':
        login = temp_data[chat_id]['login']
        if not checkPasswordCorrectness(login, text):
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–Ω–æ–≤–∞:")
            return

        logged_in[chat_id] = login
        bot.send_message(chat_id, f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {login}!")
        reset_user_data(chat_id)
        show_main_menu(chat_id)

    # –ü–µ—Ä–µ–≤–æ–¥: –ø–æ–ª—É—á–∞—Ç–µ–ª—å
    elif state == 'SEND_MONEY_RECEIVER':
        if not checkLogin(text):
            bot.send_message(chat_id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–Ω–æ–≤–∞:")
            return

        temp_data[chat_id] = {'receiver': text}
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞:")
        user_states[chat_id] = 'SEND_MONEY_AMOUNT'

    # –ü–µ—Ä–µ–≤–æ–¥: —Å—É–º–º–∞
    elif state == 'SEND_MONEY_AMOUNT':
        try:
            amount = float(text)
        except ValueError:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return

        sender = logged_in[chat_id]

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        result = execute_query("SELECT Account FROM users WHERE login=?", (sender,))
        if not result:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞")
            return

        balance = result[0][0]

bot.infinity_polling()